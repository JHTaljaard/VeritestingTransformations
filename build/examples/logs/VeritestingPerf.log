Running Symbolic PathFinder ...
symbolic.dp=z3bitvector
symbolic.string_dp_timeout_ms=0
symbolic.string_dp=none
symbolic.max_pc_length=2147483647
symbolic.max_pc_msec=0
symbolic.bvlength=32
symbolic.min_int=-2147483648
symbolic.min_long=-9223372036854775808
symbolic.min_short=-32768
symbolic.min_byte=-128
symbolic.min_char=0
symbolic.max_int=2147483647
symbolic.max_long=9223372036854775807
symbolic.max_short=32767
symbolic.max_byte=127
symbolic.max_char=65535
symbolic.min_double=4.9E-324
symbolic.max_double=1.7976931348623157E308
JavaPathfinder core system v8.0 (rev 32) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
VeritestingPerf.main("2")

====================================================== search started: 9/11/17 3:51 PM
New sym int sum min=-2147483648, max=2147483647
New sym int x0 min=-2147483648, max=2147483647
New sym int x1 min=-2147483648, max=2147483647
time to start veritesting for testMe4
New sym int sum_new0 min=-2147483648, max=2147483647
time to start veritesting for testMe4
New sym int sum_new1 min=-2147483648, max=2147483647
Z3bitvector using 32-bit bitvectors.
Allowed [min,max] values: [-2147483648,2147483647].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun sum_new0 () (_ BitVec 32))
(declare-fun sum_new1 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x0 () (_ BitVec 32))
(assert (bvsge sum_new0 #x80000000))
(assert (bvsle sum_new0 #x7fffffff))
(assert (bvsge sum_new1 #x80000000))
(assert (bvsle sum_new1 #x7fffffff))
(assert (bvsge (bvadd sum_new0 sum_new1) #x00000000))
(assert (bvsge x1 #x80000000))
(assert (bvsle x1 #x7fffffff))
(assert (or (and (bvslt x1 #x00000000) (= sum_new1 #xffffffff))
    (and (bvsgt x1 #x00000000) (= sum_new1 #x00000001))
    (and (= x1 #x00000000) (= sum_new1 #x00000000))))
(assert (bvsge x0 #x80000000))
(assert (bvsle x0 #x7fffffff))
(assert (or (and (bvslt x0 #x00000000) (= sum_new0 #xffffffff))
    (and (bvsgt x0 #x00000000) (= sum_new0 #x00000001))
    (and (= x0 #x00000000) (= sum_new0 #x00000000))))


Solving time of z3 bitvector is 1 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 3
%NonLinInteger% (sum_new0 + sum_new1) >= 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null) -> true

### PCs: total:1 sat:1 unsat:0

string analysis: SPC # = 0
NPC constraint # = 3
%NonLinInteger% (sum_new0 + sum_new1) >= 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null)
Z3bitvector using 32-bit bitvectors.
Allowed [min,max] values: [-2147483648,2147483647].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun sum_new0 () (_ BitVec 32))
(declare-fun sum_new1 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x0 () (_ BitVec 32))
(assert (bvsge sum_new0 #x80000000))
(assert (bvsle sum_new0 #x7fffffff))
(assert (bvsge sum_new1 #x80000000))
(assert (bvsle sum_new1 #x7fffffff))
(assert (bvslt (bvadd sum_new0 sum_new1) #x00000000))
(assert (bvsge x1 #x80000000))
(assert (bvsle x1 #x7fffffff))
(assert (or (and (bvslt x1 #x00000000) (= sum_new1 #xffffffff))
    (and (bvsgt x1 #x00000000) (= sum_new1 #x00000001))
    (and (= x1 #x00000000) (= sum_new1 #x00000000))))
(assert (bvsge x0 #x80000000))
(assert (bvsle x0 #x7fffffff))
(assert (or (and (bvslt x0 #x00000000) (= sum_new0 #xffffffff))
    (and (bvsgt x0 #x00000000) (= sum_new0 #x00000001))
    (and (= x0 #x00000000) (= sum_new0 #x00000000))))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 3
%NonLinInteger% (sum_new0 + sum_new1) < 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null) -> true

### PCs: total:2 sat:2 unsat:0

string analysis: SPC # = 0
NPC constraint # = 3
%NonLinInteger% (sum_new0 + sum_new1) < 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null)
neg
Z3bitvector using 32-bit bitvectors.
Allowed [min,max] values: [-2147483648,2147483647].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun sum_new0 () (_ BitVec 32))
(declare-fun sum_new1 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x0 () (_ BitVec 32))
(assert (bvsge sum_new0 #x80000000))
(assert (bvsle sum_new0 #x7fffffff))
(assert (bvsge sum_new1 #x80000000))
(assert (bvsle sum_new1 #x7fffffff))
(assert (bvsle (bvadd sum_new0 sum_new1) #x00000000))
(assert (bvsge (bvadd sum_new0 sum_new1) #x00000000))
(assert (bvsge x1 #x80000000))
(assert (bvsle x1 #x7fffffff))
(assert (or (and (bvslt x1 #x00000000) (= sum_new1 #xffffffff))
    (and (bvsgt x1 #x00000000) (= sum_new1 #x00000001))
    (and (= x1 #x00000000) (= sum_new1 #x00000000))))
(assert (bvsge x0 #x80000000))
(assert (bvsle x0 #x7fffffff))
(assert (or (and (bvslt x0 #x00000000) (= sum_new0 #xffffffff))
    (and (bvsgt x0 #x00000000) (= sum_new0 #x00000001))
    (and (= x0 #x00000000) (= sum_new0 #x00000000))))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 4
%NonLinInteger% (sum_new0 + sum_new1) <= 0 &&
%NonLinInteger% (sum_new0 + sum_new1) >= 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null) -> true

### PCs: total:3 sat:3 unsat:0

string analysis: SPC # = 0
NPC constraint # = 4
%NonLinInteger% (sum_new0 + sum_new1) <= 0 &&
%NonLinInteger% (sum_new0 + sum_new1) >= 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null)
Z3bitvector using 32-bit bitvectors.
Allowed [min,max] values: [-2147483648,2147483647].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun sum_new0 () (_ BitVec 32))
(declare-fun sum_new1 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x0 () (_ BitVec 32))
(assert (bvsge sum_new0 #x80000000))
(assert (bvsle sum_new0 #x7fffffff))
(assert (bvsge sum_new1 #x80000000))
(assert (bvsle sum_new1 #x7fffffff))
(assert (bvsgt (bvadd sum_new0 sum_new1) #x00000000))
(assert (bvsge (bvadd sum_new0 sum_new1) #x00000000))
(assert (bvsge x1 #x80000000))
(assert (bvsle x1 #x7fffffff))
(assert (or (and (bvslt x1 #x00000000) (= sum_new1 #xffffffff))
    (and (bvsgt x1 #x00000000) (= sum_new1 #x00000001))
    (and (= x1 #x00000000) (= sum_new1 #x00000000))))
(assert (bvsge x0 #x80000000))
(assert (bvsle x0 #x7fffffff))
(assert (or (and (bvslt x0 #x00000000) (= sum_new0 #xffffffff))
    (and (bvsgt x0 #x00000000) (= sum_new0 #x00000001))
    (and (= x0 #x00000000) (= sum_new0 #x00000000))))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 4
%NonLinInteger% (sum_new0 + sum_new1) > 0 &&
%NonLinInteger% (sum_new0 + sum_new1) >= 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null) -> true

### PCs: total:4 sat:4 unsat:0

string analysis: SPC # = 0
NPC constraint # = 4
%NonLinInteger% (sum_new0 + sum_new1) > 0 &&
%NonLinInteger% (sum_new0 + sum_new1) >= 0 &&
((((x1 < 0) && (sum_new1 = -1)) || ((x1 > 0) && (sum_new1 = 1))) || ((x1 = 0) && (sum_new1 = 0)))(null) && 
((((x0 < 0) && (sum_new0 = -1)) || ((x0 > 0) && (sum_new0 = 1))) || ((x0 = 0) && (sum_new0 = 0)))(null)
pos
bug

====================================================== results
no errors detected

====================================================== statistics
elapsed time:       00:00:00
states:             new=6,visited=0,backtracked=6,end=3
search:             maxDepth=4,constraints=0
choice generators:  thread=1 (signal=0,lock=1,sharedRef=0,threadApi=0,reschedule=0), data=3
heap:               new=377,released=49,maxLive=361,gcCycles=5
instructions:       3252
max memory:         240MB
loaded code:        classes=63,methods=1470

====================================================== search finished: 9/11/17 3:51 PM
