Soot started on Mon Jul 24 13:31:41 CDT 2017
Transforming TestPathsSimple... 
  IdentityStmt: r0 := @this: TestPathsSimple
  InvokeStmt: specialinvoke r0.<java.lang.Object: void <init>()>()
  ReturnVoidStmt: return
  IdentityStmt: r0 := @parameter0: java.lang.String[]
  AssignStmt: $r1 = <java.lang.System: java.io.PrintStream out>
  InvokeStmt: virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("!!!!!!!!!!!!!!! Start Testing! ")
  AssignStmt: $r2 = new TestPathsSimple
  InvokeStmt: specialinvoke $r2.<TestPathsSimple: void <init>()>()
  InvokeStmt: virtualinvoke $r2.<TestPathsSimple: void testMe3(int,int)>(0, 0)
  ReturnVoidStmt: return
  IdentityStmt: r0 := @this: TestPathsSimple
  IdentityStmt: i0 := @parameter0: int
  IdentityStmt: i1 := @parameter1: int
  AssignStmt: $r1 = <java.lang.System: java.io.PrintStream out>
  AssignStmt: $r2 = new java.lang.StringBuilder
  InvokeStmt: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
  AssignStmt: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x = ")
  AssignStmt: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
  AssignStmt: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y = ")
  AssignStmt: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
  AssignStmt: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
  InvokeStmt: virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7)
  InvokeStmt: staticinvoke <gov.nasa.jpf.symbc.Debug: int makeSymbolicInteger(java.lang.String)>("a_final")
  InvokeStmt: staticinvoke <gov.nasa.jpf.symbc.Debug: int makeSymbolicInteger(java.lang.String)>("b_final")
  AssignStmt: b4 = 11
  AssignStmt: b5 = 12
  IfStmt: if i0 > 800 goto b6_1 = 1
    IfStmt: if_SPFExpr = new ComplexNonLinearIntegerExpression(i0, GT, new IntegerConstant(800)), ifNot_SPFExpr = new ComplexNonLinearIntegerExpression(i0, LE, new IntegerConstant(800))
  #succs = 2
found common succ = b6_2 = Phi(b6, b6_1)
  AssignStmt: b6 = -1
  GotoStmt: goto [?= b6_2 = Phi(b6, b6_1)]
  AssignStmt: b6_1 = 1
finalPathExpr = new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(i0, GT, new IntegerConstant(800)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(b6, EQ, new IntegerConstant(-1)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(pathLabel, EQ, 1))), LOGICAL_OR, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(i0, LE, new IntegerConstant(800)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(b6_1, EQ, new IntegerConstant(1)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(pathLabel, EQ, 2)))), LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(pathLabel, EQ, 1), LOGICAL_AND, new ComplexNonLinearIntegerExpression(b6_2, EQ, b6)), LOGICAL_OR, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(pathLabel, EQ, 2), LOGICAL_AND, new ComplexNonLinearIntegerExpression(b6_2, EQ, b6_1))))

  IfStmt: if i1 > 1200 goto b7_1 = 1
    IfStmt: if_SPFExpr = new ComplexNonLinearIntegerExpression(i1, GT, new IntegerConstant(1200)), ifNot_SPFExpr = new ComplexNonLinearIntegerExpression(i1, LE, new IntegerConstant(1200))
  #succs = 2
found common succ = b7_2 = Phi(b7, b7_1)
  AssignStmt: b7 = -1
  GotoStmt: goto [?= b7_2 = Phi(b7, b7_1)]
  AssignStmt: b7_1 = 1
finalPathExpr = new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(i1, GT, new IntegerConstant(1200)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(b7, EQ, new IntegerConstant(-1)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(pathLabel, EQ, 3))), LOGICAL_OR, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(i1, LE, new IntegerConstant(1200)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(b7_1, EQ, new IntegerConstant(1)), LOGICAL_AND, new ComplexNonLinearIntegerExpression(pathLabel, EQ, 4)))), LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(pathLabel, EQ, 3), LOGICAL_AND, new ComplexNonLinearIntegerExpression(b7_2, EQ, b7)), LOGICAL_OR, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(pathLabel, EQ, 4), LOGICAL_AND, new ComplexNonLinearIntegerExpression(b7_2, EQ, b7_1))))

  IfStmt: if b6_2 != -1 goto (branch)
    IfStmt(ne): v = b6_2 != -1
    IfStmt: if_SPFExpr = null, ifNot_SPFExpr = null
  #succs = 2
found common succ = if b7_2 != -1 goto (branch)
  AssignStmt: $r8 = <java.lang.System: java.io.PrintStream out>
  InvokeStmt: virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("a = -1")
  GotoStmt: goto [?= (branch)]
  IfStmt: if b6_2 != 1 goto $r10 = <java.lang.System: java.io.PrintStream out>
    IfStmt(ne): v = b6_2 != 1
    IfStmt: if_SPFExpr = null, ifNot_SPFExpr = null
  AssignStmt: $r9 = <java.lang.System: java.io.PrintStream out>
  InvokeStmt: virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("a = 1")
  GotoStmt: goto [?= (branch)]
finalPathExpr = new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression(null, LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression($r8, EQ, <java.lang.System: java.io.PrintStream out>), LOGICAL_AND, new ComplexNonLinearIntegerExpression(pathLabel, EQ, 5))), LOGICAL_OR, new ComplexNonLinearIntegerExpression(null, LOGICAL_AND, new ComplexNonLinearIntegerExpression(new ComplexNonLinearIntegerExpression($r9, EQ, <java.lang.System: java.io.PrintStream out>), LOGICAL_AND, new ComplexNonLinearIntegerExpression(pathLabel, EQ, 6)))), LOGICAL_AND, )

  AssignStmt: $r11 = <java.lang.System: java.io.PrintStream out>
  InvokeStmt: virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("b = -1")
  GotoStmt: goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]
  AssignStmt: $r14 = <java.lang.System: java.io.PrintStream out>
  InvokeStmt: virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("-x-x-x-x-")
  ReturnVoidStmt: return
  IdentityStmt: i0 := @parameter0: int
  IdentityStmt: z0 := @parameter1: boolean
  AssignStmt: $r0 = <java.lang.System: java.io.PrintStream out>
  AssignStmt: $r1 = new java.lang.StringBuilder
  InvokeStmt: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
  AssignStmt: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x = ")
  AssignStmt: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
  AssignStmt: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
  InvokeStmt: virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r4)
  AssignStmt: z1 = 0
  IfStmt: if i0 > 1200 goto (branch)
    IfStmt: if_SPFExpr = new ComplexNonLinearIntegerExpression(i0, GT, new IntegerConstant(1200)), ifNot_SPFExpr = new ComplexNonLinearIntegerExpression(i0, LE, new IntegerConstant(1200))
  #succs = 2
Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 0
	at java.util.Collections$EmptyList.get(Collections.java:2976)
	at MyMain$MyAnalysis.getCommonSucc(MyMain.java:84)
	at MyMain$MyAnalysis.doAnalysis(MyMain.java:114)
	at MyMain$MyAnalysis.<init>(MyMain.java:70)
	at MyMain$1.internalTransform(MyMain.java:46)
	at soot.BodyTransformer.transform(BodyTransformer.java:51)
	at soot.Transform.apply(Transform.java:104)
	at soot.BodyPack.internalApply(BodyPack.java:49)
	at soot.Pack.apply(Pack.java:124)
	at soot.PackManager.runBodyPacks(PackManager.java:766)
	at soot.PackManager.runBodyPacks(PackManager.java:463)
	at soot.PackManager.runBodyPacks(PackManager.java:380)
	at soot.PackManager.runPacks(PackManager.java:357)
	at soot.Main.run(Main.java:198)
	at soot.Main.main(Main.java:141)
	at MyMain.main(MyMain.java:63)
