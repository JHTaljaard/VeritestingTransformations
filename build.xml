<?xml version="1.0" ?>

<!--
  build.xml - generic JPF extension build script
			  using Ant (http://jakarta.apache.org/ant)
  public targets:

	compile           compile JPF and its specific (modeled) environment libraries
	test              run all JPF tests
	jar               build JPF jar files
	dist              build binary distribution
	clean             remove the files that have been generated by the build process
-->

<project name="jpf-symbc" default="build" basedir=".">

	<!-- ========================== COMMON SECTION ========================== -->

	<!--
	local props have to come first, because Ant properties are immutable
	NOTE: this file is local - it is never in the repository!
  -->
  <property file="local.properties"/>

  <property environment="env"/>

  <!-- this is where we get the 'jpf.core' location from -->
  <property file="${user.home}/.jpf/site.properties"/>

  <!-- if there is none, default to a 'jpf-core' peer dir -->
  <property name="jpf-core" value = "../jpf-core"/>

  <!-- get the jpf-core path properties -->
	<property file="${jpf-core}/jpf.properties"/>


  <!-- compiler settings -->
  <property name="src_level"     value="8"/> 
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>

  <!-- generic classpath settings -->
  <path id="lib.path">

	  <!-- our own classes and libs come first -->
	  <pathelement location="build/main"/>
	  <!-- we don't have these
	<pathelement location="build/peers"/>
	-->
	<fileset dir=".">
		<include name="lib/*.jar"/>
	</fileset>

	<!-- add in what we need from the core -->
	<pathelement path="${jpf-core.native_classpath}"/>

</path>

<!-- init: common initialization -->
  <target name="-init">
	  <tstamp/>

	  <mkdir dir="build"/>               <!-- the build root -->

	  <!-- the things that have to be in the classpath of whatever runs Ant -->
	  <available property="have_javac" classname="com.sun.tools.javac.Main"/>
	  <fail unless="have_javac">no javac found</fail>


	  <available file="src/main"        type="dir" property="have_main"/>
	  <available file="src/annotations" type="dir" property="have_annotations"/>
	  <available file="src/peers"       type="dir" property="have_peers"/>
	  <available file="src/classes"     type="dir" property="have_classes"/>
	  <available file="src/tests"       type="dir" property="have_tests"/>
	  <available file="src/examples"    type="dir" property="have_examples"/>
	  <available file="src/benchmarks"    type="dir" property="have_benchmarks"/>
	  <available file="src/apachecli"    type="dir" property="have_apachecli"/>
	  <available file="src/wbs"    type="dir" property="have_wbs"/>
	  <available file="src/siena"    type="dir" property="have_siena"/>
	  <available file="src/schedule2_3"    type="dir" property="have_schedule2_3"/>
	  <available file="src/nanoxml"    type="dir" property="have_nanoxml"/>
	  <available file="src/printtokens2_2"    type="dir" property="have_printtokens2_2"/>
	  <available file="src/adaptersynth"    type="dir" property="have_adaptersynth"/>
	  <available file="src/tcas"    type="dir" property="have_tcas"/>
	  <available file="src/tcas_sr"    type="dir" property="have_tcas_sr"/>

	  <condition property="have_jvm_code">
		  <or>
			  <isset property="have_main"/>
			  <isset property="have_peers"/>
		  </or>
	  </condition>

	  <condition property="have_jpf_code">
		  <or>
			  <isset property="have_classes"/>
			  <isset property="have_annotations"/>
		  </or>
	  </condition>


	  <!-- optionally set the required artifacts here
	<fail unless="have_main">no src/main</fail>
	<fail unless="have_annotations">no src/annotations</fail>
	<fail unless="have_peers">no src/peers</fail>
	<fail unless="have_classes">no src/classes</fail>
	<fail unless="have_tests">no src/tests</fail>
	<fail unless="have_examples">no src/examples</fail>
	-->

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->

  <!-- public compile -->
  <target name="compile" depends="-init,-compile-annotations,-compile-main,-compile-peers,-compile-classes,-compile-tests,-compile-benchmarks,-compile-apachecli,-compile-wbs,-compile-siena,-compile-schedule2_3,-compile-nanoxml,-compile-printtokens2_2,-compile-tcas,-compile-tcas-sr,-compile-examples,-compile-adaptersynth"
	  description="compile all JPF core sources" >
  </target>

  <target name="-compile-annotations" if="have_annotations">
	  <mkdir dir="build/annotations"/>
	  <javac srcdir="src/annotations" destdir="build/annotations"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpath="" includeantruntime="false" />
  </target>

  <target name="-compile-main" if="have_main">
	  <mkdir dir="build/main"/>
	  <javac srcdir="src/main" destdir="build/main"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  classpathref="lib.path"
		  includeantruntime="false"/>
  </target>

  <target name="-compile-peers" if="have_peers" depends="-compile-main" >
	  <mkdir dir="build/peers"/>
	  <javac srcdir="src/peers" destdir="build/peers"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  classpathref="lib.path"
		  includeantruntime="false"/>
  </target>

  <target name="-compile-classes" if="have_classes" depends="-compile-annotations,-compile-main" >
	  <mkdir dir="build/classes"/>
	  <javac srcdir="src/classes" destdir="build/classes"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/annotations"/>
		  </classpath>
	  </javac>
  </target>

  <target name="-compile-tests" if="have_tests" depends="-compile-annotations,-compile-main">
	  <mkdir dir="build/tests"/>
	  <javac srcdir="src/tests" destdir="build/tests"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/annotations"/>
		  </classpath>
	  </javac>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-annotations,-compile-main,-compile-wbs,-compile-siena,-compile-schedule2_3,-compile-nanoxml,-compile-printtokens2_2">
	  <mkdir dir="build/examples" />
	  <javac srcdir="src/examples" destdir="build/examples"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/wbs"/>
			  <pathelement location="build/siena"/>
			  <pathelement location="build/schedule2_3"/>
			  <pathelement location="build/nanoxml"/>
			  <pathelement location="build/printtokens2_2"/>
			  <pathelement location="build/tcas"/>
			  <pathelement location="build/annotations"/>
		  </classpath>
	  </javac>
  </target>

  <target name="-compile-benchmarks" if="have_benchmarks" depends="-compile-examples">
	  <mkdir dir="build/benchmarks" />
	  <javac srcdir="src/benchmarks" destdir="build/benchmarks"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/annotations"/>
			  <pathelement location="build/benchmarks"/>
		  </classpath>
	  </javac>
  </target>

  <target name="-compile-apachecli" if="have_apachecli" depends="-compile-examples">
	  <mkdir dir="build/apachecli" />
	  <javac srcdir="src/apachecli" destdir="build/apachecli"
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/annotations"/>
			  <pathelement location="build/apachecli"/>
		  </classpath>
	  </javac>
	</target>

  <target name="-compile-wbs" if="have_wbs" depends="-compile-classes">
	  <mkdir dir="build/wbs" />
		<javac srcdir="src/wbs" destdir="build/wbs" 
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/annotations"/>
			  <pathelement location="build/wbs"/>
			</classpath>
	  </javac>
		<copy file="build/wbs/WBS.class" tofile="build/examples/WBS.class"/>
  </target>

	<target name="-compile-siena" if="have_siena" depends="-compile-classes">
		<mkdir dir="build/siena" />
		<javac srcdir="src/siena" destdir="build/siena"
			   debug="${debug}" source="${src_level}" deprecation="${deprecation}"
			   includeantruntime="false">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="build/classes"/>
				<pathelement location="build/annotations"/>
				<pathelement location="build/siena"/>
			</classpath>
		</javac>
	</target>

    <target name="-compile-schedule2_3" if="have_schedule2_3" depends="-compile-classes">
		<mkdir dir="build/schedule2_3" />
		<javac srcdir="src/schedule2_3" destdir="build/schedule2_3"
			   debug="${debug}" source="${src_level}" deprecation="${deprecation}"
			   includeantruntime="false">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="build/classes"/>
				<pathelement location="build/annotations"/>
				<pathelement location="build/schedule2_3"/>
			</classpath>
		</javac>
	</target>

    <target name="-compile-nanoxml" if="have_nanoxml" depends="-compile-classes">
		<mkdir dir="build/nanoxml" />
		<javac srcdir="src/nanoxml" destdir="build/nanoxml"
			   debug="${debug}" source="${src_level}" deprecation="${deprecation}"
			   includeantruntime="false">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="build/classes"/>
				<pathelement location="build/annotations"/>
				<pathelement location="build/nanoxml"/>
			</classpath>
		</javac>
	</target>

    <target name="-compile-printtokens2_2" if="have_printtokens2_2" depends="-compile-classes">
		<mkdir dir="build/printtokens2_2" />
		<javac srcdir="src/printtokens2_2" destdir="build/printtokens2_2"
			   debug="${debug}" source="${src_level}" deprecation="${deprecation}"
			   includeantruntime="false">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="build/classes"/>
				<pathelement location="build/annotations"/>
				<pathelement location="build/printtokens2_2"/>
			</classpath>
		</javac>
	</target>

	<target name="-compile-adaptersynth" if="have_adaptersynth" depends="-compile-examples">
		<mkdir dir="build/adaptersynth" />
		<javac srcdir="src/adaptersynth" destdir="build/adaptersynth"
			   debug="${debug}" source="${src_level}" deprecation="${deprecation}"
			   includeantruntime="false">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="build/classes"/>
				<pathelement location="build/examples"/>
				<pathelement location="build/annotations"/>
				<pathelement location="build/adaptersynth"/>
			</classpath>
		</javac>
	</target>

  <target name="-compile-tcas" if="have_tcas" depends="-compile-classes">
	  <mkdir dir="build/tcas" />
		<javac srcdir="src/tcas" destdir="build/tcas" 
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/annotations"/>
			  <pathelement location="build/tcas"/>
			</classpath>
	  </javac>
		<copy file="build/tcas/tcas.class" tofile="build/examples/tcas.class"/>
  </target>


  <target name="-compile-tcas-sr" if="have_tcas_sr" depends="-compile-examples">
	  <mkdir dir="build/tcas_sr" />
		<javac srcdir="src/tcas_sr" destdir="build/tcas_sr" 
		  debug="${debug}" source="${src_level}" deprecation="${deprecation}"
		  includeantruntime="false">
		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/examples"/>
			  <pathelement location="build/annotations"/>
			  <pathelement location="build/tcas_sr"/>
			</classpath>
	  </javac>
		<copy file="build/tcas_sr/tcas_singlereturn.class" tofile="build/examples/tcas_singlereturn.class"/>
  </target>




  <!-- ======================= MISC SECTION ================================ -->

  <!-- build jars -->
  <target name="build" depends="compile,-jar-jvm,-jar-jpf,-jar-annotations"
	  description="generate the ${ant.project.name} jar files" >
  </target>

  <target name="-jar-jvm" if="have_jvm_code">
	  <jar jarfile="build/${ant.project.name}.jar">
		  <fileset dir="build/main"/>
		  <fileset dir="build/peers"/>
	  </jar>
  </target>

  <target name="-jar-jpf" if="have_jpf_code">
	  <jar jarfile="build/${ant.project.name}-classes.jar">
		  <fileset dir="build/classes"/>
		  <fileset dir="build/annotations"/>
	  </jar>
  </target>

  <target name="-jar-annotations" if="have_annotations">
	  <!-- optional jar that contains annotations to be used in non-JPF dependent apps -->
	  <jar jarfile="build/${ant.project.name}-annotations.jar">
		  <fileset dir="build/annotations"/>
	  </jar>
  </target>


  <target name="dist" description="build binary distribution">
	  <delete file="build/${ant.project.name}.zip"/>
	  <!-- 2do this seems stupid - there needs to be a better way to re-base (zip basedir fails miserably) -->
	  <zip destfile="build/${ant.project.name}.zip" update="false" excludes="*">
		  <zipfileset file="jpf.properties"  prefix="${ant.project.name}"/>
		  <!-- don't have one
	  <zipfileset dir="lib"  prefix="${ant.project.name}/lib"/>
	  -->
	  <zipfileset dir="bin"  prefix="${ant.project.name}/bin"/>
	  <zipfileset dir="build" includes="*.jar" prefix="${ant.project.name}/build"/>
	  <zipfileset dir="tools" includes="Run*.jar" prefix="${ant.project.name}/tools"/>
  </zip>
  </target>

  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
	  <delete dir="build" />
	  <delete>
		  <fileset dir="." includes="**/*~" defaultexcludes="no" />
		  <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
		  <fileset dir="." includes="**/error.xml" />
	  </delete>
  </target>



  <!-- ======================= TEST SECTION ================================ -->

  <target name="test" depends="build"
	  description="compile and run core regression tests" if="have_tests">
	  <fail unless="env.JUNIT_HOME">
		  The JUNIT_HOME environment variable must be set. 
	  </fail>		  
	  <!-- note this can be directly set in local.properties, which overrides this setting -->
	  <property name="junit.home" value="${env.JUNIT_HOME}"/>

	  <property name="junit.usefile" value="false"/>

	  <junit printsummary="withOutAndErr" logfailedtests="true" showoutput="off" haltonfailure="yes"
		  fork="yes" forkmode="perTest" maxmemory="1024m">
		  <formatter type="plain" usefile="${junit.usefile}"/>

		  <classpath>
			  <path refid="lib.path"/>
			  <pathelement location="build/tests"/>
			  <pathelement location="build/classes"/>
			  <pathelement location="build/annotations"/>
			  <fileset dir="${junit.home}">
				  <include name="**/*.jar"/>
			  </fileset>  
		  </classpath>

		  <batchtest todir="build/tests">
			  <fileset dir="build/tests">
				  <exclude name="**/JPF_*.class"/>
				  <include name="**/Test*.class"/>
				  <exclude name="**/TestBitwise*.class"/>
				  <exclude name="**/TestCoverage.class"/>  
				  <exclude name="**/TestDIV.class"/> 
				  <exclude name="**/TestExJPF.class"/> 
				  <exclude name="**/TestLazy*.class"/> 
				  <exclude name="**/TestLazy*.class"/> 
				  <exclude name="**/TestPathCondition.class"/> 
				  <exclude name="**/TestStringBuilder.class"/>
				  <exclude name="**/strings/*.class"/>
				  <exclude name="/gov/nasa/jpf/symbc/strings/*.class"/>
				  <exclude name="**/Test*$*.class"/>
				  <exclude name="**/TestSymbolicListener.class"/>
				  <exclude name="**/TestSymbolicOutput.class"/>
				  <exclude name="**/TestSymbolicJPF.class"/>
			  </fileset>
		  </batchtest>
	  </junit>
  </target>
</project>
